#define BYTEn(x, n) ((x >> 8 * n) & 0xff)

// TODO: Optimize to copy from &xorCipher instead of char array

int xorCipherOpcodeSize = 55;
int rot128CipherOpcodeSize = 64;

char xorCipherOpcode[] =
    "\xe8\x00\x00\x00\x00\x58\x48\x83\xe8\x05\x48\x01\xc1\x85\xd2\x74\x26\x89\xd2\x48\x89\xc8\x4c\x8d\x0c\x11\x31\xc9\x0f\x1f\x40\x00\x4c\x89\xc2\x48"
    "\xd3\xea\x83\xc1\x08\x83\xe2\x07\x30\x10\x48\x83\xc0\x01\x49\x39\xc1\x75\xe9";

char rot128CipherOpcode[] =
    "\xe8\x00\x00\x00\x00\x58\x48\x83\xe8\x05\x48\x01\xc1\x85\xd2\x74\x2f\x89\xd2\x48\x8d\x04\x11\x83\xe2\x01\x74\x14\x80\x01\x80\x48\x83\xc1\x01\x48"
    "\x39\xc8\x74\x19\x0f\x1f\x84\x00\x00\x00\x00\x00\x80\x01\x80\x80\x41\x01\x80\x48\x83\xc1\x02\x48\x39\xc8\x75\xf0";

void xorCipher(char *block, unsigned int size, unsigned long long key) {
    for (unsigned int i = 0; i < size; ++i) {
        block[i] ^= BYTEn(key, i & 7);
    }
}

void rot128Cipher(char *block, unsigned int size, unsigned long long key) {
    for (unsigned int i = 0; i < size; ++i) {
        block[i] = (block[i] + 128) & 0xff;
    }
}